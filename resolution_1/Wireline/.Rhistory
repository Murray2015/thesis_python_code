well47_13_1)
well132_06_1
well132_06_1
all_wells2 = rbind(well132_06_1[,], well132_15_1[,], well154_01_1[,], well154_3_1[,], well164_25_1[,], well164_27_1[,], well164_28_1[,],well47_13_1[,])
all_wells2 = c(well132_06_1[,], well132_15_1[,], well154_01_1[,], well154_3_1[,], well164_25_1[,], well164_27_1[,], well164_28_1[,],well47_13_1[,])
names(all_wells2)
all_wells2 = c(well154_01_1[,], well154_3_1[,], well164_25_1[,], well164_27_1[,], well164_28_1[,],well47_13_1[,])
names(all_wells2)
all_wells2 = c(well154_01_1[,],  well164_27_1[,], well164_28_1[,],well47_13_1[,])
names(all_wells2)
temp1 = rbind(well154_01_1[,],  well164_27_1[,], well164_28_1[,],well47_13_1[,])
temp2 = rbind(well154_3_1[,], well164_25_1[,],well132_06_1[,], well132_15_1[,])
names(temp1)
names(temp2) = c("MD.Meters.", "Time..2.way.")
all_wells2 = rbind(temp1, temp2)
plot(all_wells2$Time..2.way., all_wells2$MD.Meters.)
ggplot(all_wells, aes(y=depth_below_seafloor/1000, x=time_below_seafloor)) + geom_point(aes(color=name)) + scale_y_reverse() + scale_color_brewer(name="Well",palette="Set1") + xlab('Time below seafloor (s)') + ylab('Depth below seafloor (km)') + geom_smooth(method='lm',formula=y ~ poly(x, 2)) + annotate("text", label = paste('y = ', round(summary(a)$coefficients[1],2) , " + ", round(summary(a)$coefficients[2],2) , "x + ", round(summary(a)$coefficients[3],2) , "x^2"), x = 1, y = 3.5, size = 5, colour = "red") +scale_x_continuous(position = "top")
ggplot(all_wells, aes(y=depth_below_seafloor/1000, x=time_below_seafloor)) + geom_point(aes(color=name)) + scale_y_reverse() + scale_color_brewer(name="Well",palette="Set1") + xlab('Time below seafloor (s)') + ylab('Depth below seafloor (km)') + geom_smooth(method='lm',formula=y ~ poly(x, 2)) + annotate("text", label = paste('y = ', round(summary(a)$coefficients[1],2) , " + ", round(summary(a)$coefficients[2],2) , "x + ", round(summary(a)$coefficients[3],2) , "x^2"), x = 1, y = 3.5, size = 5, colour = "red") +scale_x_continuous(position = "top")
a = lm(all_wells$depth_below_seafloor ~ poly(all_wells$time_below_seafloor, 2, raw=TRUE))
data[data$datasetme == 'Rockall',"depthshallowest"] = predict(a, newdata = data.frame(time_s = (data[data$datasetme == 'Rockall',"timedeepest"])))
a
predict(a, newdata = data.frame(time_below_seafloor = (data[data$datasetme == 'Rockall',"timeshallowest"])))
data[data$datasetme == 'Rockall',"depthshallowest"] = predict(a, newdata = data.frame(time_below_seafloor = (data[data$datasetme == 'Rockall',"timeshallowest"])))
data$datasetme == 'Rockall',"depthshallowest"]
data[data$datasetme == 'Rockall',"depthshallowest"]
data[data$datasetme == 'Rockall',"timeshallowest"])
data[data$datasetme == 'Rockall',"timeshallowest"]
predict(a, newdata = data.frame(time_below_seafloor = (data[data$datasetme == 'Rockall',"timeshallowest"])))
ggplot(all_wells, aes(y=depth_below_seafloor/1000, x=time_below_seafloor)) + geom_point(aes(color=name)) + scale_y_reverse() + scale_color_brewer(name="Well",palette="Set1") + xlab('Time below seafloor (s)') + ylab('Depth below seafloor (km)') + geom_smooth(method='lm',formula=y ~ poly(x, 2)) + annotate("text", label = paste('y = ', round(summary(a)$coefficients[1],2) , " + ", round(summary(a)$coefficients[2],2) , "x + ", round(summary(a)$coefficients[3],2) , "x^2"), x = 1, y = 3.5, size = 5, colour = "red") +scale_x_continuous(position = "top")
x = data[data$datasetme == 'Rockall',"timeshallowest"]
data[data$datasetme == 'Rockall',"depthshallowest"] = -42.46*(x/x) + 1077.71*x + 132.15*x^2
data[data$datasetme == 'Rockall',"depthshallowest"]
data[data$datasetme == 'Rockall',"depthdeppest"] = 42.46*(x/x) + 1077.71*x + 132.15*x^2
data[data$datasetme == 'Rockall',"transgreshight"] = data[data$datasetme == 'Rockall',"depthdeppest"] - data[data$datasetme == 'Rockall',"depthshallowest"]
mean(data[data$datasetme == 'Rockall',"transgreshight"])
mean(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
min(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
x = data[data$datasetme == 'Rockall',"timeshallowest"]
data[data$datasetme == 'Rockall',"depthshallowest"] = -42.46*(x/x) + 1077.71*x + 132.15*x^2
x = data[data$datasetme == 'Rockall',"timedeepest"]
data[data$datasetme == 'Rockall',"depthdeppest"] = 42.46*(x/x) + 1077.71*x + 132.15*x^2
data[data$datasetme == 'Rockall',"transgreshight"] = data[data$datasetme == 'Rockall',"depthdeppest"] - data[data$datasetme == 'Rockall',"depthshallowest"]
max(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
min(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
x = data[data$datasetme == 'Rockall',"timeshallowest"]-1.5
data[data$datasetme == 'Rockall',"depthshallowest"] = -42.46*(x/x) + 1077.71*x + 132.15*x^2
x = data[data$datasetme == 'Rockall',"timedeepest"]-1.5
data[data$datasetme == 'Rockall',"depthdeppest"] = 42.46*(x/x) + 1077.71*x + 132.15*x^2
data[data$datasetme == 'Rockall',"transgreshight"] = data[data$datasetme == 'Rockall',"depthdeppest"] - data[data$datasetme == 'Rockall',"depthshallowest"]
min(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
min(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
data[data$datasetme == 'Coverak',"depthshallowest"] = data[data$datasetme == 'Rockall',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Coverak',"depthdeppest"] = data[data$datasetme == 'Rockall',"timedeepest"] / 2 * 2000
data[data$datasetme == 'Coverak',"depthshallowest"] = data[data$datasetme == 'Coverak',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Coverak',"depthdeppest"] = data[data$datasetme == 'Coverak',"timedeepest"] / 2 * 2000
data[data$datasetme == 'Coverak',"transgreshight"] = data[data$datasetme == 'Coverak',"depthdeppest"] - data[data$datasetme == 'Coverak',"depthshallowest"]
min(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
data[data$datasetme == 'New Zealand',"depthshallowest"] =  data[data$datasetme == 'New Zealand',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'New Zealand',"depthdeppest"] = data[data$datasetme == 'New Zealand',"timedeepest"] / 2 * 2000
data[data$datasetme == 'New Zealand',"transgreshight"] = data[data$datasetme == 'New Zealand',"depthdeppest"] - data[data$datasetme == 'New Zealand',"depthshallowest"]
min(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
# Depth convert the deepest and shallowest for each basin
# FSB depth conv. uses shaw-champion 2008 data. Problem is we don't have water depth for this interval, meaning we have used a seafloor time of 1.5s as a guess for all points, but this will be a source of error.
fsb_depth_conv = read.table('FSB_depth_conv_point.dat', header = TRUE)
# Convert from milliseconds to seconds, and add 1.5 for the seafloor time.
fsb_depth_conv$time_s = (fsb_depth_conv$time_ms / 1000) + 1.5
fsb_mod = lm(depth_m ~ poly(time_s,2), data = fsb_depth_conv)
data[data$datasetme == 'FSB',"depthshallowest"] = predict(fsb_mod, newdata = data.frame(time_s = (data[data$datasetme == 'FSB',"timeshallowest"])))
data[data$datasetme == 'FSB',"depthdeppest"] = predict(fsb_mod, newdata = data.frame(time_s = (data[data$datasetme == 'FSB',"timedeepest"])))
data[data$datasetme == 'FSB',"transgreshight"] = data[data$datasetme == 'FSB',"depthdeppest"] - data[data$datasetme == 'FSB',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
# Depth convert Rockall data, assuming an average water bottom time of 1.5s. Note the sneaky x/x to make 1 where there is data in x and null if there is no data in x. This avoids resulting in a constant factor of -42.46 in any records without data.
x = data[data$datasetme == 'Rockall',"timeshallowest"]-1.5
data[data$datasetme == 'Rockall',"depthshallowest"] = -42.46*(x/x) + 1077.71*x + 132.15*x^2
x = data[data$datasetme == 'Rockall',"timedeepest"]-1.5
data[data$datasetme == 'Rockall',"depthdeppest"] = 42.46*(x/x) + 1077.71*x + 132.15*x^2
data[data$datasetme == 'Rockall',"transgreshight"] = data[data$datasetme == 'Rockall',"depthdeppest"] - data[data$datasetme == 'Rockall',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
# Depth convert Coverack, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'Coverak',"depthshallowest"] = data[data$datasetme == 'Coverak',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Coverak',"depthdeppest"] = data[data$datasetme == 'Coverak',"timedeepest"] / 2 * 2000
data[data$datasetme == 'Coverak',"transgreshight"] = data[data$datasetme == 'Coverak',"depthdeppest"] - data[data$datasetme == 'Coverak',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
data[data$datasetme == 'New Zealand',"depthshallowest"] =  data[data$datasetme == 'New Zealand',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'New Zealand',"depthdeppest"] = data[data$datasetme == 'New Zealand',"timedeepest"] / 2 * 2000
data[data$datasetme == 'New Zealand',"transgreshight"] = data[data$datasetme == 'New Zealand',"depthdeppest"] - data[data$datasetme == 'New Zealand',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
# Depth convert SlyneErris, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'SlyneErris',"depthshallowest"] = data[data$datasetme == 'SlyneErris',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'SlyneErris',"depthdeppest"] = data[data$datasetme == 'SlyneErris',"timedeepest"] / 2 * 2000
data[data$datasetme == 'SlyneErris',"transgreshight"] = data[data$datasetme == 'SlyneErris',"depthdeppest"] - data[data$datasetme == 'SlyneErris',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'SlyneErris',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'SlyneErris',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'SlyneErris',"transgreshight"], na.rm = T)
# Depth convert Porcupine, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'Porcupine',"depthshallowest"] = data[data$datasetme == 'Porcupine',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Porcupine',"depthdeppest"] = data[data$datasetme == 'Porcupine',"timedeepest"] / 2 * 2000
data[data$datasetme == 'Porcupine',"transgreshight"] = data[data$datasetme == 'Porcupine',"depthdeppest"] - data[data$datasetme == 'Porcupine',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'Porcupine',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Porcupine',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Porcupine',"transgreshight"], na.rm = T)
# Depth convert IrishRockall, with an average velocity of 2km/s, as we have no well data
ata[data$datasetme == 'IrishRockall',"depthshallowest"] = data[data$datasetme == 'IrishRockall',"timeshallowest"] / 2 * 2000
# Depth convert the deepest and shallowest for each basin
# FSB depth conv. uses shaw-champion 2008 data. Problem is we don't have water depth for this interval, meaning we have used a seafloor time of 1.5s as a guess for all points, but this will be a source of error.
fsb_depth_conv = read.table('FSB_depth_conv_point.dat', header = TRUE)
# Convert from milliseconds to seconds, and add 1.5 for the seafloor time.
fsb_depth_conv$time_s = (fsb_depth_conv$time_ms / 1000) + 1.5
fsb_mod = lm(depth_m ~ poly(time_s,2), data = fsb_depth_conv)
data[data$datasetme == 'FSB',"depthshallowest"] = predict(fsb_mod, newdata = data.frame(time_s = (data[data$datasetme == 'FSB',"timeshallowest"])))
data[data$datasetme == 'FSB',"depthdeppest"] = predict(fsb_mod, newdata = data.frame(time_s = (data[data$datasetme == 'FSB',"timedeepest"])))
data[data$datasetme == 'FSB',"transgreshight"] = data[data$datasetme == 'FSB',"depthdeppest"] - data[data$datasetme == 'FSB',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
# Depth convert Rockall data, assuming an average water bottom time of 1.5s. Note the sneaky x/x to make 1 where there is data in x and null if there is no data in x. This avoids resulting in a constant factor of -42.46 in any records without data.
x = data[data$datasetme == 'Rockall',"timeshallowest"]-1.5
data[data$datasetme == 'Rockall',"depthshallowest"] = -42.46*(x/x) + 1077.71*x + 132.15*x^2
x = data[data$datasetme == 'Rockall',"timedeepest"]-1.5
data[data$datasetme == 'Rockall',"depthdeppest"] = 42.46*(x/x) + 1077.71*x + 132.15*x^2
data[data$datasetme == 'Rockall',"transgreshight"] = data[data$datasetme == 'Rockall',"depthdeppest"] - data[data$datasetme == 'Rockall',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
# Depth convert Coverack, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'Coverak',"depthshallowest"] = data[data$datasetme == 'Coverak',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Coverak',"depthdeppest"] = data[data$datasetme == 'Coverak',"timedeepest"] / 2 * 2000
data[data$datasetme == 'Coverak',"transgreshight"] = data[data$datasetme == 'Coverak',"depthdeppest"] - data[data$datasetme == 'Coverak',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
data[data$datasetme == 'New Zealand',"depthshallowest"] =  data[data$datasetme == 'New Zealand',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'New Zealand',"depthdeppest"] = data[data$datasetme == 'New Zealand',"timedeepest"] / 2 * 2000
data[data$datasetme == 'New Zealand',"transgreshight"] = data[data$datasetme == 'New Zealand',"depthdeppest"] - data[data$datasetme == 'New Zealand',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
# Depth convert SlyneErris, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'SlyneErris',"depthshallowest"] = data[data$datasetme == 'SlyneErris',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'SlyneErris',"depthdeppest"] = data[data$datasetme == 'SlyneErris',"timedeepest"] / 2 * 2000
data[data$datasetme == 'SlyneErris',"transgreshight"] = data[data$datasetme == 'SlyneErris',"depthdeppest"] - data[data$datasetme == 'SlyneErris',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'SlyneErris',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'SlyneErris',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'SlyneErris',"transgreshight"], na.rm = T)
# Depth convert Porcupine, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'Porcupine',"depthshallowest"] = data[data$datasetme == 'Porcupine',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Porcupine',"depthdeppest"] = data[data$datasetme == 'Porcupine',"timedeepest"] / 2 * 2000
data[data$datasetme == 'Porcupine',"transgreshight"] = data[data$datasetme == 'Porcupine',"depthdeppest"] - data[data$datasetme == 'Porcupine',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'Porcupine',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Porcupine',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Porcupine',"transgreshight"], na.rm = T)
# Depth convert IrishRockall, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'IrishRockall',"depthshallowest"] = data[data$datasetme == 'IrishRockall',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'IrishRockall',"depthdeppest"] = data[data$datasetme == 'IrishRockall',"timedeepest"] / 2 * 2000
data[data$datasetme == 'IrishRockall',"transgreshight"] = data[data$datasetme == 'IrishRockall',"depthdeppest"] - data[data$datasetme == 'IrishRockall',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'IrishRockall',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'IrishRockall',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'IrishRockall',"transgreshight"], na.rm = T)
# Find summary statistics by basin.
tapply(data$transgreshight, data$deatasetme, mean)
data$transgreshight
tapply(data$transgreshight, data$datasetme, median)
tapply(data$transgreshight, data$datasetme, sd)
tapply(data$transgreshight, data$deatasetme, mean)
ggplot(data) + geom_boxplot(aes(x=datasetme, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
# Depth convert the deepest and shallowest for each basin
# FSB depth conv. uses shaw-champion 2008 data. Problem is we don't have water depth for this interval, meaning we have used a seafloor time of 1.5s as a guess for all points, but this will be a source of error.
fsb_depth_conv = read.table('FSB_depth_conv_point.dat', header = TRUE)
# Convert from milliseconds to seconds, and add 1.5 for the seafloor time.
fsb_depth_conv$time_s = (fsb_depth_conv$time_ms / 1000)
fsb_mod = lm(depth_m ~ poly(time_s,2), data = fsb_depth_conv)
data[data$datasetme == 'FSB',"depthshallowest"] = predict(fsb_mod, newdata = data.frame(time_s = (data[data$datasetme == 'FSB',"timeshallowest"])))
data[data$datasetme == 'FSB',"depthdeppest"] = predict(fsb_mod, newdata = data.frame(time_s = (data[data$datasetme == 'FSB',"timedeepest"])))
data[data$datasetme == 'FSB',"transgreshight"] = data[data$datasetme == 'FSB',"depthdeppest"] - data[data$datasetme == 'FSB',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
# Depth convert Rockall data, assuming an average water bottom time of 1.5s. Note the sneaky x/x to make 1 where there is data in x and null if there is no data in x. This avoids resulting in a constant factor of -42.46 in any records without data.
x = data[data$datasetme == 'Rockall',"timeshallowest"]-1.5
data[data$datasetme == 'Rockall',"depthshallowest"] = -42.46*(x/x) + 1077.71*x + 132.15*x^2
x = data[data$datasetme == 'Rockall',"timedeepest"]-1.5
data[data$datasetme == 'Rockall',"depthdeppest"] = 42.46*(x/x) + 1077.71*x + 132.15*x^2
data[data$datasetme == 'Rockall',"transgreshight"] = data[data$datasetme == 'Rockall',"depthdeppest"] - data[data$datasetme == 'Rockall',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
# Depth convert Coverack, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'Coverak',"depthshallowest"] = data[data$datasetme == 'Coverak',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Coverak',"depthdeppest"] = data[data$datasetme == 'Coverak',"timedeepest"] / 2 * 2000
data[data$datasetme == 'Coverak',"transgreshight"] = data[data$datasetme == 'Coverak',"depthdeppest"] - data[data$datasetme == 'Coverak',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
data[data$datasetme == 'New Zealand',"depthshallowest"] =  data[data$datasetme == 'New Zealand',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'New Zealand',"depthdeppest"] = data[data$datasetme == 'New Zealand',"timedeepest"] / 2 * 2000
data[data$datasetme == 'New Zealand',"transgreshight"] = data[data$datasetme == 'New Zealand',"depthdeppest"] - data[data$datasetme == 'New Zealand',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
# Depth convert SlyneErris, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'SlyneErris',"depthshallowest"] = data[data$datasetme == 'SlyneErris',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'SlyneErris',"depthdeppest"] = data[data$datasetme == 'SlyneErris',"timedeepest"] / 2 * 2000
data[data$datasetme == 'SlyneErris',"transgreshight"] = data[data$datasetme == 'SlyneErris',"depthdeppest"] - data[data$datasetme == 'SlyneErris',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'SlyneErris',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'SlyneErris',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'SlyneErris',"transgreshight"], na.rm = T)
# Depth convert Porcupine, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'Porcupine',"depthshallowest"] = data[data$datasetme == 'Porcupine',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Porcupine',"depthdeppest"] = data[data$datasetme == 'Porcupine',"timedeepest"] / 2 * 2000
data[data$datasetme == 'Porcupine',"transgreshight"] = data[data$datasetme == 'Porcupine',"depthdeppest"] - data[data$datasetme == 'Porcupine',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'Porcupine',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Porcupine',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Porcupine',"transgreshight"], na.rm = T)
# Depth convert IrishRockall, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'IrishRockall',"depthshallowest"] = data[data$datasetme == 'IrishRockall',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'IrishRockall',"depthdeppest"] = data[data$datasetme == 'IrishRockall',"timedeepest"] / 2 * 2000
data[data$datasetme == 'IrishRockall',"transgreshight"] = data[data$datasetme == 'IrishRockall',"depthdeppest"] - data[data$datasetme == 'IrishRockall',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'IrishRockall',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'IrishRockall',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'IrishRockall',"transgreshight"], na.rm = T)
# Find summary statistics by basin.
tapply(data$transgreshight, data$deatasetme, mean)
ggplot(data) + geom_boxplot(aes(x=datasetme, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
fsb_depth_conv
# Depth convert the deepest and shallowest for each basin
# FSB depth conv. uses shaw-champion 2008 data. Problem is we don't have water depth for this interval, meaning we have used a seafloor time of 1.5s as a guess for all points, but this will be a source of error.
fsb_depth_conv = read.table('FSB_depth_conv_point.dat', header = TRUE)
# Convert from milliseconds to seconds, and add 1.5 for the seafloor time.
fsb_depth_conv$time_s = (fsb_depth_conv$time_ms / 1000) *2
fsb_mod = lm(depth_m ~ poly(time_s,2), data = fsb_depth_conv)
data[data$datasetme == 'FSB',"depthshallowest"] = predict(fsb_mod, newdata = data.frame(time_s = (data[data$datasetme == 'FSB',"timeshallowest"])))
data[data$datasetme == 'FSB',"depthdeppest"] = predict(fsb_mod, newdata = data.frame(time_s = (data[data$datasetme == 'FSB',"timedeepest"])))
data[data$datasetme == 'FSB',"transgreshight"] = data[data$datasetme == 'FSB',"depthdeppest"] - data[data$datasetme == 'FSB',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
# Depth convert Rockall data, assuming an average water bottom time of 1.5s. Note the sneaky x/x to make 1 where there is data in x and null if there is no data in x. This avoids resulting in a constant factor of -42.46 in any records without data.
x = data[data$datasetme == 'Rockall',"timeshallowest"]-1.5
data[data$datasetme == 'Rockall',"depthshallowest"] = -42.46*(x/x) + 1077.71*x + 132.15*x^2
x = data[data$datasetme == 'Rockall',"timedeepest"]-1.5
data[data$datasetme == 'Rockall',"depthdeppest"] = 42.46*(x/x) + 1077.71*x + 132.15*x^2
data[data$datasetme == 'Rockall',"transgreshight"] = data[data$datasetme == 'Rockall',"depthdeppest"] - data[data$datasetme == 'Rockall',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
# Depth convert Coverack, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'Coverak',"depthshallowest"] = data[data$datasetme == 'Coverak',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Coverak',"depthdeppest"] = data[data$datasetme == 'Coverak',"timedeepest"] / 2 * 2000
data[data$datasetme == 'Coverak',"transgreshight"] = data[data$datasetme == 'Coverak',"depthdeppest"] - data[data$datasetme == 'Coverak',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
data[data$datasetme == 'New Zealand',"depthshallowest"] =  data[data$datasetme == 'New Zealand',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'New Zealand',"depthdeppest"] = data[data$datasetme == 'New Zealand',"timedeepest"] / 2 * 2000
data[data$datasetme == 'New Zealand',"transgreshight"] = data[data$datasetme == 'New Zealand',"depthdeppest"] - data[data$datasetme == 'New Zealand',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
# Depth convert SlyneErris, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'SlyneErris',"depthshallowest"] = data[data$datasetme == 'SlyneErris',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'SlyneErris',"depthdeppest"] = data[data$datasetme == 'SlyneErris',"timedeepest"] / 2 * 2000
data[data$datasetme == 'SlyneErris',"transgreshight"] = data[data$datasetme == 'SlyneErris',"depthdeppest"] - data[data$datasetme == 'SlyneErris',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'SlyneErris',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'SlyneErris',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'SlyneErris',"transgreshight"], na.rm = T)
# Depth convert Porcupine, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'Porcupine',"depthshallowest"] = data[data$datasetme == 'Porcupine',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Porcupine',"depthdeppest"] = data[data$datasetme == 'Porcupine',"timedeepest"] / 2 * 2000
data[data$datasetme == 'Porcupine',"transgreshight"] = data[data$datasetme == 'Porcupine',"depthdeppest"] - data[data$datasetme == 'Porcupine',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'Porcupine',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Porcupine',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Porcupine',"transgreshight"], na.rm = T)
# Depth convert IrishRockall, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'IrishRockall',"depthshallowest"] = data[data$datasetme == 'IrishRockall',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'IrishRockall',"depthdeppest"] = data[data$datasetme == 'IrishRockall',"timedeepest"] / 2 * 2000
data[data$datasetme == 'IrishRockall',"transgreshight"] = data[data$datasetme == 'IrishRockall',"depthdeppest"] - data[data$datasetme == 'IrishRockall',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'IrishRockall',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'IrishRockall',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'IrishRockall',"transgreshight"], na.rm = T)
# Find summary statistics by basin.
tapply(data$transgreshight, data$deatasetme, mean)
ggplot(data) + geom_boxplot(aes(x=datasetme, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
# Depth convert the deepest and shallowest for each basin
# FSB depth conv. uses shaw-champion 2008 data. Problem is we don't have water depth for this interval, meaning we have used a seafloor time of 1.5s as a guess for all points, but this will be a source of error.
fsb_depth_conv = read.table('FSB_depth_conv_point.dat', header = TRUE)
# Convert from milliseconds to seconds, and add 1.5 for the seafloor time.
fsb_depth_conv$time_s = ((fsb_depth_conv$time_ms / 1000) *2)+1.5
fsb_mod = lm(depth_m ~ poly(time_s,2), data = fsb_depth_conv)
data[data$datasetme == 'FSB',"depthshallowest"] = predict(fsb_mod, newdata = data.frame(time_s = (data[data$datasetme == 'FSB',"timeshallowest"])))
data[data$datasetme == 'FSB',"depthdeppest"] = predict(fsb_mod, newdata = data.frame(time_s = (data[data$datasetme == 'FSB',"timedeepest"])))
data[data$datasetme == 'FSB',"transgreshight"] = data[data$datasetme == 'FSB',"depthdeppest"] - data[data$datasetme == 'FSB',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'FSB',"transgreshight"], na.rm = T)
# Depth convert Rockall data, assuming an average water bottom time of 1.5s. Note the sneaky x/x to make 1 where there is data in x and null if there is no data in x. This avoids resulting in a constant factor of -42.46 in any records without data.
x = data[data$datasetme == 'Rockall',"timeshallowest"]-1.5
data[data$datasetme == 'Rockall',"depthshallowest"] = -42.46*(x/x) + 1077.71*x + 132.15*x^2
x = data[data$datasetme == 'Rockall',"timedeepest"]-1.5
data[data$datasetme == 'Rockall',"depthdeppest"] = 42.46*(x/x) + 1077.71*x + 132.15*x^2
data[data$datasetme == 'Rockall',"transgreshight"] = data[data$datasetme == 'Rockall',"depthdeppest"] - data[data$datasetme == 'Rockall',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Rockall',"transgreshight"], na.rm = T)
# Depth convert Coverack, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'Coverak',"depthshallowest"] = data[data$datasetme == 'Coverak',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Coverak',"depthdeppest"] = data[data$datasetme == 'Coverak',"timedeepest"] / 2 * 2000
data[data$datasetme == 'Coverak',"transgreshight"] = data[data$datasetme == 'Coverak',"depthdeppest"] - data[data$datasetme == 'Coverak',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Coverak',"transgreshight"], na.rm = T)
data[data$datasetme == 'New Zealand',"depthshallowest"] =  data[data$datasetme == 'New Zealand',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'New Zealand',"depthdeppest"] = data[data$datasetme == 'New Zealand',"timedeepest"] / 2 * 2000
data[data$datasetme == 'New Zealand',"transgreshight"] = data[data$datasetme == 'New Zealand',"depthdeppest"] - data[data$datasetme == 'New Zealand',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'New Zealand',"transgreshight"], na.rm = T)
# Depth convert SlyneErris, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'SlyneErris',"depthshallowest"] = data[data$datasetme == 'SlyneErris',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'SlyneErris',"depthdeppest"] = data[data$datasetme == 'SlyneErris',"timedeepest"] / 2 * 2000
data[data$datasetme == 'SlyneErris',"transgreshight"] = data[data$datasetme == 'SlyneErris',"depthdeppest"] - data[data$datasetme == 'SlyneErris',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'SlyneErris',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'SlyneErris',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'SlyneErris',"transgreshight"], na.rm = T)
# Depth convert Porcupine, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'Porcupine',"depthshallowest"] = data[data$datasetme == 'Porcupine',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Porcupine',"depthdeppest"] = data[data$datasetme == 'Porcupine',"timedeepest"] / 2 * 2000
data[data$datasetme == 'Porcupine',"transgreshight"] = data[data$datasetme == 'Porcupine',"depthdeppest"] - data[data$datasetme == 'Porcupine',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'Porcupine',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Porcupine',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Porcupine',"transgreshight"], na.rm = T)
# Depth convert IrishRockall, with an average velocity of 2km/s, as we have no well data
data[data$datasetme == 'IrishRockall',"depthshallowest"] = data[data$datasetme == 'IrishRockall',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'IrishRockall',"depthdeppest"] = data[data$datasetme == 'IrishRockall',"timedeepest"] / 2 * 2000
data[data$datasetme == 'IrishRockall',"transgreshight"] = data[data$datasetme == 'IrishRockall',"depthdeppest"] - data[data$datasetme == 'IrishRockall',"depthshallowest"]
# Sanity check
min(data[data$datasetme == 'IrishRockall',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'IrishRockall',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'IrishRockall',"transgreshight"], na.rm = T)
# Find summary statistics by basin.
tapply(data$transgreshight, data$deatasetme, mean)
ggplot(data) + geom_boxplot(aes(x=datasetme, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
tapply(data$transgreshight, data$deatasetme, mean)
apply(data$transgreshight, data$deatasetme, mean)
sapply(data$transgreshight, data$deatasetme, mean)
tapply(data$transgreshight, data$deatasetme, mean)
ggplot(data) + geom_boxplot(aes(x=datasetme, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
data[data$datasetme == 'Judd',"depthshallowest"] = data[data$datasetme == 'IrishRockall',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'judd',"depthshallowest"] = data[data$datasetme == 'IrishRockall',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Judd',"depthshallowest"] = data[data$datasetme == 'Judd',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Judd',"depthshallowest"] = data[data$datasetme == 'Judd',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Judd',"depthdeppest"] = data[data$datasetme == 'Judd',"timedeepest"] / 2 * 2000
data[data$datasetme == 'Judd',"transgreshight"] = data[data$datasetme == 'Judd',"depthdeppest"] - data[data$datasetme == 'Judd',"depthshallowest"]
min(data[data$datasetme == 'Judd',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Judd',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Judd',"transgreshight"], na.rm = T)
ggplot(data) + geom_boxplot(aes(x=datasetme, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
data[data$datasetme == 'Hatton',"depthshallowest"] = data[data$datasetme == 'Hatton',"timeshallowest"] / 2 * 2000
data[data$datasetme == 'Hatton',"depthdeppest"] = data[data$datasetme == 'Hatton',"timedeepest"] / 2 * 2000
data[data$datasetme == 'Hatton',"transgreshight"] = data[data$datasetme == 'Hatton',"depthdeppest"] - data[data$datasetme == 'Hatton',"depthshallowest"]
min(data[data$datasetme == 'Hatton',"transgreshight"], na.rm = T)
mean(data[data$datasetme == 'Hatton',"transgreshight"], na.rm = T)
max(data[data$datasetme == 'Hatton',"transgreshight"], na.rm = T)
sub1 = subset(data, data$datasetme !=)
ggplot(data) + geom_boxplot(aes(x=datasetme, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
data[data$datasetme == 'Hatton',"depthshallowest"] = data[data$datasetme == 'Hatton',"timeshallowest"] / 2 * 2000
data$datasetme == 'Hatton',"depthshallowest"
data[data$datasetme == 'Hatton',"depthshallowest"]
data[data$datasetme == 'Hatton',"timeshallowest"]
ggplot(data) + geom_boxplot(aes(x=datasetme, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
sub1 = subset(data, data$datasetme !='Hatton' | data$datasetme !='Karoo' | data$datasetme != 'Modelling')
ggplot(sub1) + geom_boxplot(aes(x=datasetme, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
sub1 = subset(data, data$datasetme !='Hatton' | data$datasetme !='Karoo' | data$datasetme != 'Modelling')
ggplot(sub1) + geom_boxplot(aes(x=datasetme, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
subset2 = subset(data, data$datasetme != 'Modelling' & data$datasetme != 'Hatton' & data$datasetme != 'Karoo')
ggplot(subset2) + geom_boxplot(aes(x=datasetme, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
ggplot(subset2) + geom_boxplot(aes(x=datasetme, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
ggsave(filename = "ch2_transgressive_height.jpg", dpi=300, width=5, height=4, units='in')
ggplot(subset2) + geom_boxplot(aes(x=shape, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
ggplot(subset2) + geom_boxplot(aes(x=shape, y=transgreshight, fill=shape)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
subset3 = subset(data, data$shape != NA & data$shape != 'Laccolith')
ggplot(subset3) + geom_boxplot(aes(x=shape, y=transgreshight, fill=shape)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
subset3 = subset(data, !is.na(data$shape) & data$shape != 'Laccolith')
ggplot(subset3) + geom_boxplot(aes(x=shape, y=transgreshight, fill=shape)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
subset2 = subset(data, data$datasetme != 'Modelling' & data$datasetme != 'Hatton' & data$datasetme != 'Karoo')
ggplot(subset2) + geom_boxplot(aes(x=datasetme, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
ggsave(filename = "ch2_transgressive_height_basin.jpg", dpi=300, width=5, height=4, units='in')
subset3 = subset(data, !is.na(data$shape) & data$shape != 'Laccolith')
ggplot(subset3) + geom_boxplot(aes(x=shape, y=transgreshight, fill=shape)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Sill diameter (m)')
ggsave(filename = "ch2_transgressive_height.jpg", dpi=300, width=5, height=4, units='in')
ggsave(filename = "ch2_transgressive_height_shape.jpg", dpi=300, width=5, height=4, units='in')
ggplot(subset3) + geom_boxplot(aes(x=shape, y=transgreshight, fill=shape)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Sill shape') + ylab('Sill diameter (m)')
ggsave(filename = "ch2_transgressive_height.jpg", dpi=300, width=5, height=4, units='in')
ggsave(filename = "ch2_transgressive_height_shape.jpg", dpi=300, width=5, height=4, units='in')
ggplot(subset3) + geom_boxplot(aes(x=shape, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Sill shape') + ylab('Sill diameter (m)')
ggplot(subset3) + geom_boxplot(aes(x=shape, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1") + xlab('Sill shape') + ylab('Sill diameter (m)')
subset2 = subset(data, data$datasetme != 'Modelling' & data$datasetme != 'Hatton' & data$datasetme != 'Karoo')
ggplot(subset2) + geom_boxplot(aes(x=datasetme, y=transgreshight, fill=datasetme)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Dataset name') + ylab('Transgressive height (m)')
ggsave(filename = "ch2_transgressive_height_basin.jpg", dpi=300, width=5, height=4, units='in')
subset3 = subset(data, !is.na(data$shape) & data$shape != 'Laccolith')
ggplot(subset3) + geom_boxplot(aes(x=shape, y=transgreshight, fill=shape)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))  + scale_fill_brewer(palette="Set1")+ guides(fill=FALSE) + xlab('Sill shape') + ylab('Transgressive height (m)')
ggsave(filename = "ch2_transgressive_height.jpg", dpi=300, width=5, height=4, units='in')
ggsave(filename = "ch2_transgressive_height_shape.jpg", dpi=300, width=5, height=4, units='in')
tapply(data$transgreshight, data$deatasetme, mean)
tapply(subset2$transgreshight, subset2$deatasetme, mean)
tapply(subset2$transgreshight, subset2$deatasetme, summary)
?tapply
length(subset2$transgreshight)
length(subset2$deatasetme)
length(subset2$datasetme)
tapply(data$transgreshight, data$datasetme, mean)
tapply(data$transgreshight, data$datasetme, mean, na.rm=T)
tapply(data$transgreshight, data$datasetme, median, na.rm=T)
tapply(data$transgreshight, data$datasetme, sd, na.rm=T)
?iqr
?IQR
tapply(data$transgreshight, data$datasetme, min, na.rm=T)
tapply(data$transgreshight, data$datasetme, median, na.rm=T)
sort(tapply(data$transgreshight, data$datasetme, median, na.rm=T))
setwd("~/Documents/thesis_python_code/resolution_1/Wireline/")
data = read.csv("resolution-1_final.las")
data = read.csv("resolution-1_final.las", skip = 55)
head(data)
data = read.csv("resolution-1_final.las", skip = 55, sep = "\t")
head(data)
data[1,1]
data = read.csv("resolution-1_final.las", skip = 55, sep = "")
data[1,1]
data = read.csv("resolution-1_final.las", skip = 54, header = TRUE, sep = "")
data = read.csv("resolution-1_final.las", skip = 54, header = F, sep = "")
data[1,1]
data[1,2]
data[2,2]
data = read.csv("resolution-1_final.las", skip = 55, sep = "")
names(data)
plot(data$GR)
data = read.csv("resolution-1_final.las", skip = 55, sep = "", na.strings = -999.99)
plot(data$GR)
data$GR
data = read.csv("resolution-1_final.las", skip = 55, sep = "", na.strings = -999.25)
plot(data$GR)
data$GR
data = read.csv("resolution-1_final.las", skip = 55, sep = "", na.strings = "-999.25")
data$GR
data$GR[995]
data = read.csv("resolution-1_final.las", skip = 55, sep = "", na.strings = " -999.25")
data$GR[995]
data = read.csv("resolution-1_final.las", skip = 55, sep = "", na.strings = "-999.25")
data$GR[995]
data = read.csv("resolution-1_final.las", skip = 55, sep = "", na.strings=-999.25)
data$GR[995]
data[data==-999.25] = NA
data$GR[995]
plot(data$GR)
plot(x=data$Depth, y=data$GR)
names(data)
plot(x=data$DEPTH, y=data$GR)
plot(x=data$DEPTH)
data = read.csv("resolution-1_final.las", skip = 55, sep = "", na.strings=-999.25)
data[data==-999.25] = 0
plot(x=data$DEPTH, y=data$GR)
tail(data)
